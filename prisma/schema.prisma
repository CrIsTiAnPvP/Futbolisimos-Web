generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  PartidosJugados   Int @default(0)
  PartidosGanados   Int @default(0)
  PartidosPerdidos  Int @default(0)
  PartidosEmpatados Int @default(0)
  PuntosTotales     Int @default(0)
  GolesFavor        Int @default(0)
  GolesContra       Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Liga {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  nombre     String
  miembros   String[]
  id_creador String   @db.ObjectId
  createdAt  DateTime @default(now())
  cantidadMiembros Int @default(0) @map("cantidadMiembros")
  privada   Boolean  @default(false)

  // Relacion 1-n con equipo, ya que 1 liga tiene muchos equipos y 1 equipo pertenece a una liga
  equipos Equipo[]

  // Relacion 1-1 con mercado, ya que 1 liga tiene un mercado y 1 mercado pertenece a una liga
  mercado Mercado @relation(fields: [id], references: [id_liga], onDelete: Cascade)
}

model Equipo {
  id_owner String @db.ObjectId
  id_liga  String @db.ObjectId
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  nombre   String
  Valor    Float

  Puntos           Int
  PartidosJugados  Int
  PartidosGanados  Int
  PartidosPerdidos Int
  GolesFavor       Int
  GolesContra      Int

  // Relacion m-n Con jugadores, ya que 1 equipo tiene muchos jugadores y 1 jugador puede estar en muchos equipos (De diferentes ligas)
  Jugadores    Jugador[] @relation(fields: [IdsJugadores], references: [id])
  IdsJugadores String[]  @db.ObjectId

  // Relacion 1-n con liga, ya que 1 liga tiene muchos equipos y 1 equipo pertenece a una liga
  liga Liga @relation(fields: [id_liga], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  // Solo puede haber un equipo por liga y por owner, ya que no puede haber 2 equipos con el mismo owner en la misma liga
  @@unique([id_liga, id_owner])

  // Unicidad del nombre del equipo, ya que no puede haber 2 equipos con el mismo nombre, en la misma liga
  @@unique([id_liga, nombre])
}

model Jugador {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  nombre     String
  posicion   String
  edad       Int
  EquipoReal String
  Valor      Float
  Stats      Stats[]

  // Relacion m-n Con equipo, ya que 1 jugador puede estar en muchos equipos (De diferentes ligas) y 1 equipo tiene muchos jugadores 
  Equipo    Equipo[] @relation(fields: [IdsEquipo], references: [id])
  IdsEquipo String[] @db.ObjectId

  // Relacion m-n con mercado, ya que 1 jugador puede estar en muchos mercados (De diferentes ligas) y 1 mercado tiene muchos jugadores
  Mercados    Mercado[] @relation(fields: [IdsMercados], references: [id])
  IdsMercados String[]  @db.ObjectId

  // Relacion 1-n con operacion, ya que 1 jugador tiene muchas operaciones (diferentes mercados de diferentes ligas) y 1 operacion pertenece a un jugador
  Operaciones Operacion[]
}

model Stats {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  id_equipo         String   @db.ObjectId
  id_jugador        String   @db.ObjectId
  id_liga           String   @db.ObjectId
  goles             Int
  asistencias       Int
  partidosJugados   Int
  tarjetasRojas     Int
  tarjetasAmarillas Int
  resistenciaIni    Float
  resistencia       Float
  lesionado         Boolean
  lesionadoDesde    DateTime
  lesionadoHasta    DateTime
  lesiones          Int
  ValorLiga         Float

  // Relaci√≥n 1-n con jugador, ya que 1 jugador tiene muchas estadisticas (Debido a las diferentes ligas y equipos) y 1 estadistica pertenece a un jugador
  Jugador Jugador @relation(fields: [id_jugador], references: [id], onDelete: Cascade)

  // Unicidad del id_equipo, id_jugador y id_liga, ya que no puede haber 2 estadisticas con el mismo jugador, equipo y liga
  @@unique([id_equipo, id_jugador, id_liga])
}

model Mercado {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  id_liga String @db.ObjectId

  // Relacion m-n con jugadores, ya que 1 mercado tiene muchos jugadores y 1 jugador puede estar en muchos mercados (De diferentes ligas)
  Jugadores    Jugador[] @relation(fields: [IdsJugadores], references: [id])
  IdsJugadores String[]  @db.ObjectId

  Operaciones Operacion[]

  Liga Liga?

  // Unicidad del id_liga, ya que no puede haber 2 mercados con la misma liga
  @@unique([id_liga])
}

model Operacion {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  id_jugador String @db.ObjectId
  id_mercado String @db.ObjectId

  PrecioInicial Float
  PrecioActual  Float
  PrecioFinal   Float
  Fecha         DateTime
  UltimaPuja    DateTime

  // Relacion 1-1 con jugador, ya que 1 operacion tiene un jugador y 1 jugador tiene una operacion
  Jugador Jugador @relation(fields: [id_jugador], references: [id], onDelete: Cascade)

  // Relacion 1-n con mercado, ya que 1 operacion tiene un mercado y 1 mercado tiene muchas operaciones
  Mercado Mercado @relation(fields: [id_mercado], references: [id], onDelete: Cascade)
}
