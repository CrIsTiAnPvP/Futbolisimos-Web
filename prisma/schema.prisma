generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Liga {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  nombre   String
  miembros String[]
  id_creador  String   @db.ObjectId
  createdAt DateTime @default(now())

  // Relacion 1-n con equipo, ya que 1 liga tiene muchos equipos y 1 equipo pertenece a una liga
  equipos  Equipo[]
}

model Equipo {
  id_owner  String    @db.ObjectId
  id_liga   String    @db.ObjectId
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  nombre    String
  Valor     Float
  
  // Relacion m-n Con jugadores, ya que 1 equipo tiene muchos jugadores y 1 jugador puede estar en muchos equipos (De diferentes ligas)
  Jugadores Jugador[] @relation(fields: [IdsJugadores], references: [id])
  IdsJugadores String[] @db.ObjectId

  // Relacion 1-n con liga, ya que 1 liga tiene muchos equipos y 1 equipo pertenece a una liga
  liga      Liga      @relation(fields: [id_liga], references: [id], onDelete: Cascade)

  // Solo puede haber un equipo por liga y por owner, ya que no puede haber 2 equipos con el mismo owner en la misma liga
  @@unique([id_liga, id_owner])
  // Unicidad del nombre del equipo, ya que no puede haber 2 equipos con el mismo nombre
  @@unique([nombre])

  createdAt DateTime @default(now())
}

model Jugador {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  nombre     String
  posicion   String
  edad       Int
  EquipoReal String
  Stats      Stats[]

  // Relacion m-n Con equipo, ya que 1 jugador puede estar en muchos equipos (De diferentes ligas) y 1 equipo tiene muchos jugadores 
  Equipo   Equipo[]  @relation(fields: [IdsEquipo], references: [id]) 
  IdsEquipo String[] @db.ObjectId
}

model Stats {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  id_equipo         String @db.ObjectId
  id_jugador        String @db.ObjectId
  id_liga           String @db.ObjectId
  goles             Int
  asistencias       Int
  partidosJugados   Int
  tarjetasRojas     Int
  tarjetasAmarillas Int
  ResistenciaIni    Float

  // Relaci√≥n 1-n con jugador, ya que 1 jugador tiene muchas estadisticas (Debido a las diferentes ligas y equipos) y 1 estadistica pertenece a un jugador
  Jugador Jugador @relation(fields: [id_jugador], references: [id], onDelete: Cascade)

  // Unicidad del id_equipo, id_jugador y id_liga, ya que no puede haber 2 estadisticas con el mismo jugador, equipo y liga
  @@unique([id_equipo, id_jugador, id_liga])
}
